// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: server.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const appendServerLifecycleLog = `-- name: AppendServerLifecycleLog :one
UPDATE servers
SET lifecycle_logs = jsonb_build_array($1::jsonb) || lifecycle_logs
WHERE id = $2
RETURNING lifecycle_logs
`

type AppendServerLifecycleLogParams struct {
	Column1 []byte      `json:"column_1"`
	ID      pgtype.UUID `json:"id"`
}

func (q *Queries) AppendServerLifecycleLog(ctx context.Context, arg AppendServerLifecycleLogParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, appendServerLifecycleLog, arg.Column1, arg.ID)
	var lifecycle_logs []byte
	err := row.Scan(&lifecycle_logs)
	return lifecycle_logs, err
}

const createNewServer = `-- name: CreateNewServer :one

INSERT INTO servers (name, region, status, type, address, hourly_cost)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, region, status, address, type, provisioned_at, last_status_update, uptime_seconds, hourly_cost, lifecycle_logs, created_at, updated_at
`

type CreateNewServerParams struct {
	Name       string  `json:"name"`
	Region     string  `json:"region"`
	Status     string  `json:"status"`
	Type       string  `json:"type"`
	Address    string  `json:"address"`
	HourlyCost float64 `json:"hourly_cost"`
}

// sql/servers.sql
func (q *Queries) CreateNewServer(ctx context.Context, arg CreateNewServerParams) (Server, error) {
	row := q.db.QueryRow(ctx, createNewServer,
		arg.Name,
		arg.Region,
		arg.Status,
		arg.Type,
		arg.Address,
		arg.HourlyCost,
	)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Region,
		&i.Status,
		&i.Address,
		&i.Type,
		&i.ProvisionedAt,
		&i.LastStatusUpdate,
		&i.UptimeSeconds,
		&i.HourlyCost,
		&i.LifecycleLogs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteServer = `-- name: DeleteServer :exec
DELETE FROM servers WHERE id = $1
`

func (q *Queries) DeleteServer(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteServer, id)
	return err
}

const enforceLifecycleLogsLimit = `-- name: EnforceLifecycleLogsLimit :exec
UPDATE servers
SET lifecycle_logs =
    CASE
        WHEN jsonb_array_length(lifecycle_logs) > 100 
            THEN jsonb_path_query_array(lifecycle_logs, '$[0 to 14]') 
        ELSE lifecycle_logs
    END
WHERE id = $1
`

func (q *Queries) EnforceLifecycleLogsLimit(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, enforceLifecycleLogsLimit, id)
	return err
}

const getServer = `-- name: GetServer :one
SELECT id, name, region, status, address, type, provisioned_at, last_status_update, uptime_seconds, hourly_cost, lifecycle_logs, created_at, updated_at FROM servers WHERE id = $1
`

func (q *Queries) GetServer(ctx context.Context, id pgtype.UUID) (Server, error) {
	row := q.db.QueryRow(ctx, getServer, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Region,
		&i.Status,
		&i.Address,
		&i.Type,
		&i.ProvisionedAt,
		&i.LastStatusUpdate,
		&i.UptimeSeconds,
		&i.HourlyCost,
		&i.LifecycleLogs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServerLifecycleLogs = `-- name: GetServerLifecycleLogs :one
SELECT lifecycle_logs FROM servers WHERE id = $1
`

func (q *Queries) GetServerLifecycleLogs(ctx context.Context, id pgtype.UUID) ([]byte, error) {
	row := q.db.QueryRow(ctx, getServerLifecycleLogs, id)
	var lifecycle_logs []byte
	err := row.Scan(&lifecycle_logs)
	return lifecycle_logs, err
}

const listServers = `-- name: ListServers :many
SELECT id, name, region, status, address, type, provisioned_at, last_status_update, uptime_seconds, hourly_cost, lifecycle_logs, created_at, updated_at FROM servers
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) ListServers(ctx context.Context, status string) ([]Server, error) {
	rows, err := q.db.Query(ctx, listServers, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Region,
			&i.Status,
			&i.Address,
			&i.Type,
			&i.ProvisionedAt,
			&i.LastStatusUpdate,
			&i.UptimeSeconds,
			&i.HourlyCost,
			&i.LifecycleLogs,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAllServers = `-- name: SelectAllServers :many
SELECT id, name, region, status, address, type, provisioned_at, last_status_update, uptime_seconds, hourly_cost, lifecycle_logs, created_at, updated_at FROM servers
`

func (q *Queries) SelectAllServers(ctx context.Context) ([]Server, error) {
	rows, err := q.db.Query(ctx, selectAllServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Region,
			&i.Status,
			&i.Address,
			&i.Type,
			&i.ProvisionedAt,
			&i.LastStatusUpdate,
			&i.UptimeSeconds,
			&i.HourlyCost,
			&i.LifecycleLogs,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const terminateAllServers = `-- name: TerminateAllServers :exec
UPDATE servers
SET status = 'terminated',
    last_status_update = NOW(),
    lifecycle_logs = lifecycle_logs || jsonb_build_object(
        'timestamp', NOW(),
        'event', 'System Reset: Server Terminated by System',
        'request_id', 'system-reset'
    )::jsonb
WHERE status != 'terminated'
`

func (q *Queries) TerminateAllServers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, terminateAllServers)
	return err
}

const truncateServers = `-- name: TruncateServers :exec
TRUNCATE servers RESTART IDENTITY CASCADE
`

func (q *Queries) TruncateServers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateServers)
	return err
}

const updateServerStatus = `-- name: UpdateServerStatus :one
UPDATE servers
SET status = $1, last_status_update = NOW()
WHERE id = $2
RETURNING id, name, region, status, address, type, provisioned_at, last_status_update, uptime_seconds, hourly_cost, lifecycle_logs, created_at, updated_at
`

type UpdateServerStatusParams struct {
	Status string      `json:"status"`
	ID     pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateServerStatus(ctx context.Context, arg UpdateServerStatusParams) (Server, error) {
	row := q.db.QueryRow(ctx, updateServerStatus, arg.Status, arg.ID)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Region,
		&i.Status,
		&i.Address,
		&i.Type,
		&i.ProvisionedAt,
		&i.LastStatusUpdate,
		&i.UptimeSeconds,
		&i.HourlyCost,
		&i.LifecycleLogs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateServerUptime = `-- name: UpdateServerUptime :one
UPDATE servers
SET uptime_seconds = $1, updated_at = NOW()
WHERE id = $2
RETURNING id, name, region, status, address, type, provisioned_at, last_status_update, uptime_seconds, hourly_cost, lifecycle_logs, created_at, updated_at
`

type UpdateServerUptimeParams struct {
	UptimeSeconds int64       `json:"uptime_seconds"`
	ID            pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateServerUptime(ctx context.Context, arg UpdateServerUptimeParams) (Server, error) {
	row := q.db.QueryRow(ctx, updateServerUptime, arg.UptimeSeconds, arg.ID)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Region,
		&i.Status,
		&i.Address,
		&i.Type,
		&i.ProvisionedAt,
		&i.LastStatusUpdate,
		&i.UptimeSeconds,
		&i.HourlyCost,
		&i.LifecycleLogs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
