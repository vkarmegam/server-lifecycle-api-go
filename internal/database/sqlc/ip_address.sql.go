// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ip_address.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allocateIPAddress = `-- name: AllocateIPAddress :one
UPDATE ip_addresses
SET is_allocated = TRUE, server_id = $1, updated_at = NOW()
WHERE id = $2 AND is_allocated = FALSE AND server_id IS NULL
RETURNING id, address, is_allocated, server_id, created_at, updated_at
`

type AllocateIPAddressParams struct {
	ServerID pgtype.UUID `json:"server_id"`
	ID       pgtype.UUID `json:"id"`
}

func (q *Queries) AllocateIPAddress(ctx context.Context, arg AllocateIPAddressParams) (IpAddress, error) {
	row := q.db.QueryRow(ctx, allocateIPAddress, arg.ServerID, arg.ID)
	var i IpAddress
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.IsAllocated,
		&i.ServerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createIPAddress = `-- name: CreateIPAddress :one

INSERT INTO ip_addresses (address)
VALUES ($1)
RETURNING id, address, is_allocated, server_id, created_at, updated_at
`

// sql/ip_address.sql
func (q *Queries) CreateIPAddress(ctx context.Context, address string) (IpAddress, error) {
	row := q.db.QueryRow(ctx, createIPAddress, address)
	var i IpAddress
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.IsAllocated,
		&i.ServerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deallocateIPAddress = `-- name: DeallocateIPAddress :one
UPDATE ip_addresses
SET is_allocated = FALSE, server_id = NULL, updated_at = NOW()
WHERE id = $1
RETURNING id, address, is_allocated, server_id, created_at, updated_at
`

func (q *Queries) DeallocateIPAddress(ctx context.Context, id pgtype.UUID) (IpAddress, error) {
	row := q.db.QueryRow(ctx, deallocateIPAddress, id)
	var i IpAddress
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.IsAllocated,
		&i.ServerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAvailableIPForAllocation = `-- name: GetAvailableIPForAllocation :one
SELECT id, address, is_allocated, server_id, created_at, updated_at FROM ip_addresses
WHERE is_allocated = FALSE AND server_id IS NULL
ORDER BY created_at ASC
FOR UPDATE SKIP LOCKED
LIMIT 1
`

func (q *Queries) GetAvailableIPForAllocation(ctx context.Context) (IpAddress, error) {
	row := q.db.QueryRow(ctx, getAvailableIPForAllocation)
	var i IpAddress
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.IsAllocated,
		&i.ServerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIPAddressByServerID = `-- name: GetIPAddressByServerID :one
SELECT id, address, is_allocated, server_id, created_at, updated_at FROM ip_addresses WHERE server_id = $1
`

func (q *Queries) GetIPAddressByServerID(ctx context.Context, serverID pgtype.UUID) (IpAddress, error) {
	row := q.db.QueryRow(ctx, getIPAddressByServerID, serverID)
	var i IpAddress
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.IsAllocated,
		&i.ServerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const truncateIPAddresses = `-- name: TruncateIPAddresses :exec
TRUNCATE ip_addresses RESTART IDENTITY CASCADE
`

func (q *Queries) TruncateIPAddresses(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateIPAddresses)
	return err
}
